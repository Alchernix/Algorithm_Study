import sys
input=sys.stdin.readline

class HashTable:
    def __init__(self, size):
        self.size = size
        self.table = [None] * size

    def hash_function(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self.hash_function(key)
        if self.table[index] is None:
            self.table[index] = []
        self.table[index].append((key, value))

    def search(self, key):
        index = self.hash_function(key)
        if self.table[index] is None:
            return None
        for (k, v) in self.table[index]:
            if k == key:
                return v
        return None

    def delete(self, key):
        index = self.hash_function(key)
        if self.table[index] is None:
            return False
        for i, (k, v) in enumerate(self.table[index]):
            if k == key:
                del self.table[index][i]
                return True
        return False

    def get_all_keys(self):
        keys = []
        for bucket in self.table:
            if bucket is not None:
                for k, v in bucket:
                    keys.append(k)
        return keys

n=int(input())
h1=HashTable(26)
for _ in range(n):
    k=input().strip().split()
    if k[1]=='enter':
        h1.insert(k[0],k[1])
    if k[1]=='leave':
        h1.delete(k[0])
q=sorted(h1.get_all_keys())[::-1]
for i in q:
    print(i)