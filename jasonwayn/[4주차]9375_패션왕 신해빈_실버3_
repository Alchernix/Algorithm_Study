import sys
input=sys.stdin.readline

class HashTable:
    def __init__(self, size):
        self.size = size
        self.table = [None] * size

    def hash_function(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self.hash_function(key)
        if self.table[index] is None:
            self.table[index] = []
        self.table[index].append((key, value))

    def search(self, key):
        index = self.hash_function(key)
        if self.table[index] is None:
            return None
        for (k, v) in self.table[index]:
            if k == key:
                return v
        return None

    def delete(self, key):
        index = self.hash_function(key)
        if self.table[index] is None:
            return False
        for i, (k, v) in enumerate(self.table[index]):
            if k == key:
                del self.table[index][i]
                return True
        return False
    
    def get_all_values(self):
        values = []
        for bucket in self.table:
            if bucket is not None:
                values.append(len(bucket))
        return values

m=int(input())
for _ in range(m):
    h1=HashTable(100000)  # Hash 값 작게하면 collision생김 -> 해결책 : 단순히 키운다?
    n=int(input())
    for _ in range(n):
        k=input().split()
        h1.insert(k[1],k[0])
    q=h1.get_all_values()
    count=1
    for i in range(len(q)):
        count*=q[i]+1
    print(count-1)
