#include <iostream>
#include <string>
#include <queue>
#include <vector>
#include <algorithm>

using namespace std;

// 구조체 선언
struct Student {
	int id;
	int food;
};

// split 함수 선언
vector<string> split(string st, string delimiter) {
	vector<string> result;

	// 시작지점 ~ 구분문자 직전까지의 단어를 벡터의 요소로 받기 위함 
	int start = 0;
	// end는 구분문자 delimiter의 첫번째 위치를 찾고, 없으면 npos를 반환
	int end = st.find(delimiter);
	while (end != string::npos) {
		// 시작지점 ~ 구분문자가 나오기 전까지의 단어를 벡터에 추가
		result.push_back(st.substr(start, end - start));
		// 시작지점과 끝지점을 업데이트
		start = end + delimiter.length();
		end = st.find(delimiter, start);
	}
	// 마지막 조각을 추가
	result.push_back(st.substr(start, end));

	return result;
}

// 벡터 출력을 위한 함수
string printList(const vector<int>& list_x) {
	if (list_x.empty()) {
		return "None";
	}

	string result;
	for (size_t i = 0; i < list_x.size(); ++i) {
		result += to_string(list_x[i]);
		if (i != list_x.size() - 1) {
			result += " ";
		}
	}
	return result;
}

// main
int main() {
	int nInput;
	queue<Student> q;
	string st;

	// 답안 제출을 위한 리스트 선언
	vector<int> list_a; // 본인이 좋아하는 음식을 먹은 학생 id
	vector<int> list_b; // 본인이 좋아하는 음식을 먹지 못한 학생 id
	vector<int> list_c; // 음식을 먹지 못한 학생 id

	// 입력에 대한 처리 로직
	cin >> nInput;
	cin.ignore();

	for (int i = 0; i < nInput; i++) {
		getline(cin, st);
		vector<string> st_list = split(st, " ");

		if (st_list[0] == "1") {
			// 1로 시작하는 줄의 경우,
			// Student 구조체로 큐에 push
			Student A;
			A.id = stoi(st_list[1]);
			A.food = stoi(st_list[2]);
			q.push(A);
		}
		else if (st_list[0] == "2") {
			// 2로 시작하는 줄의 경우,
			// 일단 큐에서 pop하고, 
			// 원하는 음식을 먹었는지 유무에 따라 처리한다.
			if (!q.empty()) {
				Student Y = q.front();
				q.pop();
				if (Y.food == stoi(st_list[1])) {
					list_a.push_back(Y.id);
				}
				else {
					list_b.push_back(Y.id);
				}
			}
		}
	}

	// 만약 q에 학생이 남아있다면, 모두 list_c에 추가한다.
	while (!q.empty()) {
		Student C = q.front();
		list_c.push_back(C.id);
		q.pop();
	}

	// 리스트 정렬
	sort(list_a.begin(), list_a.end());
	sort(list_b.begin(), list_b.end());
	sort(list_c.begin(), list_c.end());

	// 세 리스트를 출력한다
	cout << printList(list_a) << endl;
	cout << printList(list_b) << endl;
	cout << printList(list_c) << endl;

	return 0;
}
