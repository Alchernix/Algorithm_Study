// 기존 코드 - 시간초과
#include <iostream>
#include <unordered_map>

using namespace std;

int main(){
    int nInput, mInput;
    cin >> nInput >> mInput;

    
    unordered_map<int, bool> hashMap;
    vector<int> cds;
    
    for(int i=0; i< nInput; i++){
        int cd1;
        cin >> cd1;
        hashMap[cd1]=false;
    }
    
    for(int i=0; i<mInput; i++){
        int cd2;
        cin >> cd2;
        hashMap[cd2]=true;
    }
    
    // hashMap에 들어있는 value 중 true인 원소의 개수를 출력
    int count=0;
    unordered_map<int, bool>::iterator iter;
    for(iter = hashMap.begin(); iter != hashMap.end(); ++iter){
        if(iter->second){
            count++;
        }
    }
    
    cout << count << endl;
    
    return 0;
}

// 이후 코드 : 952ms
// 달라진 점 : cin 관련 속도 향상 코드 2줄 추가, unordered_map 대신 unordered_set 자료구조 사용, 해시맵 구조를 다시 순회하지 않고, 2번째 for문(위 코드 기준)에서 if문으로 그냥 처리해버림
#include <iostream>
#include <unordered_set>

using namespace std;

int main() {
    ios::sync_with_stdio(false); // 입출력 속도 향상
    cin.tie(NULL); // 입출력 속도 향상

    while (true) {
        int nInput, mInput;
        cin >> nInput >> mInput;

        // 입력 중 0 0이 있는 경우 종료
        if (nInput == 0 && mInput == 0) {
            break;
        }

        unordered_set<int> hashSet;
        
        // 상근이가 가지고 있는 CD 번호를 입력받고 저장
        for (int i = 0; i < nInput; i++) {
            int cd;
            cin >> cd;
            hashSet.insert(cd);
        }

        int count = 0;

        // 선영이가 가지고 있는 CD 번호를 입력받아 상근이가 가지고 있는지 확인
        for (int i = 0; i < mInput; i++) {
            int cd;
            cin >> cd;
            if (hashSet.find(cd) != hashSet.end()) {
                count++;
            }
        }

        // 결과 출력
        cout << count << endl;
    }

    return 0;
}
